# DirectorSync v2 — Universal Resource Profiles (overrides)
version: 1
profiles:

######### Repos ######################################################################
  Repos:
    resource: "Repos"

    api:
      resource: "Repos"
      methods:
        get:
          list_key_candidates: ["data", "repos"]
        post:
          whitelist: ["name", "hiddenrepopath", "repoha"]
        put:
          whitelist: ["id", "hiddenrepopath", "repoha"]
      subresources:
        - name: "repo_paths"
          path: "RepoPaths"
          extract:
            list_field_candidates: ["0.paths", "paths"]

    xlsx:
      sheet: "Repo"
      columns:
        name:
          required: true
          aliases: ["cleaned_repo_name"]
          normalize: { strip: true }
        storage_paths:
          required: true
          split_on: ["|", ","]
          normalize:
            trim_each: true
            ensure_trailing_slash: true
        retention_days:
          required: true
          split_on: ["|", ","]
          normalize: { trim_each: true }
          validate: { same_length_as: "storage_paths" }
        repoha_li:
          required: false
          split_on: ["|", ","]
          normalize: { trim_each: true }
        repoha_day:
          required: false
          split_on: ["|", ","]
          normalize: { trim_each: true }

    mapping:
      api_fields:
        post: ["name", "hiddenrepopath", "repoha"]
        put:  ["id", "hiddenrepopath", "repoha"]
      fields:
        name:
          from: "name"
          op: "copy"
        hiddenrepopath:
          from: ["storage_paths", "retention_days"]
          op: "zip_list_of_dict"
          keys: ["path", "retention"]
        repoha:
          from: ["repoha_li", "repoha_day"]
          op: "zip_list_of_dict"
          keys: ["ha_li", "ha_day"]

    compare:
      eq_fields: ["hiddenrepopath", "repoha"]
      list_dict_unordered:
        hiddenrepopath: { key_fields: ["path"],  value_fields: ["retention"] }
        repoha:         { key_fields: ["ha_li"], value_fields: ["ha_day"] }
      ignore_fields: []

    verify:
      - name: "repo_paths_exist"
        using_subresource: "repo_paths"
        expect: "paths"
        on_missing: "skip"

    options:
      stringify_payload_values: true
      warn_on_unknown_columns: true

######### RoutingPolicies #####################################################
RoutingPolicy:
  resource: "RoutingPolicies"

  api:
    resource: "RoutingPolicies"
    methods:
      get:
        list_key_candidates: ["data", "routing_policies", "items"]
      post:
        whitelist: ["policy_name", "routing_criteria", "catch_all", "active"]
      put:
        whitelist: ["id", "routing_criteria", "catch_all", "active"]

  xlsx:
    sheet: "RoutingPolicy"
    columns:
      cleaned_policy_name: { required: true,  normalize: { strip: true } }
      active:              { required: false, default: "true" }
      catch_all:           { required: true,  normalize: { strip: true } }
      rule_type:           { required: false, split_on: ["|", ","], normalize: { trim_each: true } }
      key:                 { required: false, split_on: ["|", ","], normalize: { trim_each: true } }
      value:               { required: false, split_on: ["|", ","], normalize: { trim_each: true } }
      repo:                { required: false, split_on: ["|", ","], normalize: { trim_each: true } }
      drop:                { required: false, split_on: ["|", ","], normalize: { trim_each: true } }

  mapping:
    api_fields:
      post: ["policy_name", "routing_criteria", "catch_all", "active"]
      put:  ["id", "routing_criteria", "catch_all", "active"]

    fields:
      policy_name:
        from: "cleaned_policy_name"
        op: "copy"

      active:
        from: "active"
        op: "copy"

      # Convert catch_all repo name -> repo id (consistent with criteria)
      catch_all:
        from: "catch_all"
        op: "lookup"
        lookup:
          resource: "Repos"
          source_key: "name"
          target_key: "id"
          cache: "per-node"
          required: true

      # Build routing_criteria from multi-line columns and lookup each repo
      routing_criteria:
        from: ["rule_type", "key", "value", "repo", "drop"]
        op: "zip_list_of_dict"
        keys: ["type", "key", "value", "repo", "drop"]
        lookup:
          resource: "Repos"          # repo name -> id
          source_key: "repo"         # column in XLSX
          target_key: "id"
          into_key:  "repo"          # replace 'repo' with id
          cache: "per-node"
          required: false            # allow empty criteria rows

  compare:
    eq_fields: ["active", "catch_all"]
    list_dict_unordered:
      routing_criteria:
        key_fields:   ["type", "key", "value", "repo"]
        value_fields: ["drop"]
    ignore_fields: []

  verify: []
  options:
    stringify_payload_values: true
    warn_on_unknown_columns: true


######### ProcessingPolicy ############################################################
  ProcessingPolicy:
    resource: "ProcessingPolicy"

    api:
      resource: "ProcessingPolicy"
      methods:
        get:
          list_key_candidates: ["data", "processing_policies"]
        post:
          whitelist: ["policy_name", "norm_policy", "enrich_policy", "routing_policy"]
        put:
          whitelist: ["id", "norm_policy", "enrich_policy", "routing_policy"]

    xlsx:
      sheet: "ProcessingPolicy"
      columns:
        policy_name:    { required: true,  normalize: { strip: true } }
        norm_policy:    { required: true,  normalize: { strip: true } }
        enrich_policy:  { required: false, normalize: { strip: true } }
        routing_policy: { required: true,  normalize: { strip: true } }

    mapping:
      api_fields:
        post: ["policy_name", "norm_policy", "enrich_policy", "routing_policy"]
        put:  ["id", "norm_policy", "enrich_policy", "routing_policy"]
      fields:
        policy_name: { from: "policy_name", op: "copy" }
        norm_policy:
          from: "norm_policy"
          op: "lookup"
          lookup:
            resource: "NormalizationPolicy"
            source_key: "name"
            target_key: "id"
            cache: "per-node"
            required: true
        enrich_policy:
          from: "enrich_policy"
          op: "lookup"
          lookup:
            resource: "EnrichmentPolicy"
            source_key: "name"
            target_key: "id"
            cache: "per-node"
            required: false
        routing_policy:
          from: "routing_policy"
          op: "lookup"
          lookup:
            resource: "RoutingPolicy"
            source_key: "name"
            target_key: "id"
            cache: "per-node"
            required: true

    compare:
      eq_fields: ["norm_policy", "enrich_policy", "routing_policy"]
      ignore_fields: []

    verify:
      - name: "dependencies_exist"
        using_subresource: ""
        expect: "ids"
        on_missing: "skip"

    options:
      stringify_payload_values: true
      warn_on_unknown_columns: true

######### AlertRule ############################################################

  AlertRules:
    resource: "AlertRules"

    api:
      resource: "AlertRules"
      methods:
        post:
          whitelist: [
            "searchname","owner","risk","repos","aggregate",
            "condition_option","condition_value","limit",
            "timerange_minute","timerange_hour","timerange_day",
            "query","description","log_source","search_interval_minute",
            "flush_on_trigger","throttling_enabled","throttling_field",
            "throttling_time_range","alert_context_template"
          ]
        put:
          whitelist: [
            "owner","risk","repos","aggregate",
            "condition_option","condition_value","limit",
            "timerange_minute","timerange_hour","timerange_day",
            "query","description","log_source","search_interval_minute",
            "flush_on_trigger","throttling_enabled","throttling_field",
            "throttling_time_range","alert_context_template"
          ]

    options:
      # Résolution du propriétaire sans XLSX (obligatoire API)
      # Ordre: profiles.yml -> env(LP_ALERT_OWNER) -> contexte(token)
      default_owner: "admin"

      # Parsing listes (repos, log_source) : mêmes séparateurs que les autres modules
      list_split_separators: ["|", ",", "\n"]

      # Timerange : on n’émet QU’UNE seule unité (priorité minute > hour > day)
      timerange_priority: ["minute","hour","day"]

      # Normalisation des repos (legacy ip:port/Repo → ip:port:Repo_CLEANED)
      repos_normalize: true
      repos_use_tenant_ip_private: true   # filtre sur backends du tenant si activé
      repo_sheet_mapping_enabled: true    # feuille "Repo" old -> cleaned (si présente)

    mapping:
      columns:
        # --- IDENTITÉ ---
        - source: "name"                 # XLSX column
          rename: "searchname"           # API field
          type: str
          required: true
          normalize: ["trim"]

        # --- OWNER (hors XLSX) ---
        - source: "settings.user"            # pas dans XLSX
          rename: "owner"
          required: true
          default_from: "profiles.options.default_owner"  

        # --- RISQUE / AGGRÉGATION ---
        - source: "settings.risk"
          rename: "risk"
          type: str
          normalize: ["trim","upper"]   
          default: ""
        - source: "settings.aggregate"
          rename: "aggregate"
          type: str
          normalize: ["trim"]
          default: ""

        # --- CONDITION ---
        - source: "settings.condition.condition_option"
          rename: "condition_option"
          type: str
          normalize: ["trim"]
          default: "count"
        - source: "settings.condition.condition_value"
          rename: "condition_value"
          type: int
          default: 0
          min: 0

        # --- LIMIT / QUERY ---
        - source: "settings.livesearch_data.limit"
          rename: "limit"
          type: int
          default: 0
          min: 0
        - source: ["settings.livesearch_data.query", "settings.extra_config.query"]  # premier non-vide
          rename: "query"
          type: str
          normalize: ["trim"]
          default: ""                         # optionnel

        # --- DESCRIPTION / LOG SOURCE ---
        - source: "settings.description"
          rename: "description"
          type: str
          default: ""
        - source: "settings.log_source"
          rename: "log_source"
          type: list[str]
          split: true                         # utilise options.list_split_separators
          default: []

        # --- INTERVAL / FLUSH / THROTTLING ---
        - source: "settings.search_interval_minute"
          rename: "search_interval_minute"
          type: int
          default: 0
          min: 0
        - source: "settings.flush_on_trigger"
          rename: "flush_on_trigger"
          type: bool
          bool_onoff: true                    # true -> "on", false -> absent
        - source: "settings.throttling_enabled"
          rename: "throttling_enabled"
          type: bool
          bool_onoff: true
        - source: "settings.throttling_field"
          rename: "throttling_field"
          type: str
          default: ""
        - source: "settings.throttling_time_range"
          rename: "throttling_time_range"
          type: int
          default: 0
          min: 0

        # --- CONTEXTE ---
        - source: "settings.context_template"
          rename: "alert_context_template"
          type: str
          default: ""

        # --- TIMERANGE (une seule unité) ---
        - source: "settings.timerange.minute"
          rename: "timerange_minute"
          type: int
          default: null
          min: 0
        - source: "settings.timerange.hour"
          rename: "timerange_hour"
          type: int
          default: null
          min: 0
        - source: "settings.timerange.day"
          rename: "timerange_day"
          type: int
          default: null
          min: 0

        # --- REPOS (obligatoire) ---
        - source: "settings.repos"
          rename: "repos"
          type: list[str]
          split: true
          required: true
          normalize_repos: true     # applique ip:port[:Repo_CLEANED], filtre tenant, mapping feuille Repo

